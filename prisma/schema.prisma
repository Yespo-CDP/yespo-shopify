// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id                   Int       @id @default(autoincrement())
  shopId               String    @unique
  shopUrl              String    @unique
  email                String
  name                 String
  domain               String    @unique @default("")
  apiKey               String?
  siteId               String?
  isWebTrackingEnabled Boolean?  @default(false)
  isContactSyncEnabled Boolean?  @default(false)
  isOrderSyncEnabled   Boolean?  @default(false)
  active               Boolean?  @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt

  customerDataRequests GdprCustomerDataRequest[]
  eventsData           EventData[]
  customerSyncs        CustomerSync[]
  customerSyncLogs     CustomerSyncLog?
  orderSyncs           OrderSync[]
  orderSyncLogs        OrderSyncLog?
}

model GdprCustomerDataRequest {
  id        Int       @id @default(autoincrement())
  webhookId String    @unique
  topic     String
  payload   Json
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int
}

model EventData {
  cartToken String    @id
  sc        String
  ttl       DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String? // optional foreign key field
}

model Customer {
  customerId String  @id
  phone      String?
  email      String?
  firstName  String?
  lastName   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  eventsData EventData[]
}

model CustomerSync {
  id         Int       @id @default(autoincrement())
  customerId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int
}

enum SyncLogStatus {
  NOT_STARTED
  IN_PROGRESS
  ERROR
  COMPLETE
}

model CustomerSyncLog {
  id           Int           @id @default(autoincrement())
  syncedCount  Int           @default(0)
  skippedCount Int           @default(0)
  failedCount  Int           @default(0)
  totalCount   Int           @default(0)
  status       SyncLogStatus @default(NOT_STARTED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int  @unique
}

model OrderSyncLog {
  id           Int           @id @default(autoincrement())
  syncedCount  Int           @default(0)
  skippedCount Int           @default(0)
  failedCount  Int           @default(0)
  totalCount   Int           @default(0)
  status       SyncLogStatus @default(NOT_STARTED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int  @unique
}

model OrderSync {
  id        Int       @id @default(autoincrement())
  orderId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId Int
}
